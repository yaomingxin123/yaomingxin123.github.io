[{"title":"python unreal(5.2)开发记录","url":"/2023/06/05/python-unreal开发记录/","content":"代码段记录\n\n选择actor并移动\n要获静态网格体的组件,才能移动\n````\nimport unreal\na=unreal.EditorLevelLibrary.get_selected_level_actors()\nprint(a[0].static_mesh_component.set_world_location(unreal.Vector(0,0,0)))\n````\n\n<!--more-->"},{"title":"ue地编蓝图疑难杂症","url":"/2023/05/11/ue地编蓝图疑难杂症/","content":"#### 地编\n\n### 流送池超出\n1.简单理解内存溢出，扩大内存设置是其中一个办法(4.24默认3000)\ncmd r.Streaming.PoolSize = 4096  \n2.项目设置中纹理推送（取消勾选）  \n3.rhi 改成directx 11(改成x11 后纹理推送就要勾选)\n5.实在不行就换内存大点的显卡\n### 距离很远时雾气会消失\n\n解决办法：ExponentialHeightFog 下视图距离Volumetric Fog Distance调整\n<!--more-->\n### 距离很远时阴影会消失\n\n解决办法：动态阴影距离Dynamic Shadow Distance Movable Light可移动光照调整\n\n### 距离很远时灯光会消失\n\n解决办法：  \n1.项目设置中，光源的最小屏幕半径Min Screen Radius for Lights 设置为0\n2.后期盒子里 有空测试\n\n### 太阳雾气很大\n定向内散射指数Directional inscattering Exponent 调整\n\n\n\n#### 蓝图\n### cast to 失败\n\n1.检查物体的碰撞模式（动态场景，静态场景）  \n2.检查物体是否有碰撞\n\n### 向量的运算\n\n位置减法:a-b= b指向a的向量\n向量加法:a+b= 平行四边形\n向量乘法:a*b = 沿着向量方向位移\n\n向量点乘 获取的是两个向量的夹角,大于180为-1,否则为1,使用acos可以转换为角度\n向量差乘 获取垂直于两个向量平面的值\nps:使用distance函数获得两个点之间的位置\n\n#### 渲染\n\n### 输出mov\n开启 Apple ProRes插件\n\n编解码器  \nApple ProRes 422 Proxy 画质为最低,压缩最高(一般用这个预览)\nApple ProRes 4444 XQ 相反,文件大小很大\n"},{"title":"assembly 装配切换思路","url":"/2023/02/27/assembly-装配切换思路/","content":"\n### 获取所有文件进行切换\n````\nassembly_ref_list = cmds.ls(type=['assemblyReference', 'assemblyDefinition'])\n\nfor i in assembly_ref_list:\n    print i\n    listRepresentations = cmds.assembly(i, query=True, listRepresentations=True)\n    print listRepresentations\n    for d in listRepresentations:\n        # 改变装配文件(注意代码有问题,现在相当于全部切换一遍)\n        sel_item = cmds.assembly(i, edit=True, activeLabel=d)\n        print sel_item\n````\n\n之后其实就是使用setAttr来调换信息,使其切换项目排在第一位,因为测试发现不进行这一步操作,\n再次打开文件后会恢复设置.\n### 装配未解决问题\n\n材质和位置目前不可更改,更改后发现再次打开文件会恢复材质,个别档案甚至不能赋予新材质"},{"title":"Maya Publish file 思路","url":"/2023/02/27/Maya-Publish-file-思路/","content":"\n### 检查pluginInfo 是否加载\nredshift4maya\nAbcExport\nAbcImport\ngpuCache\nsceneAssembly\n\n### 去除自带摄像机\n````\nassemblies = cmds.ls(assemblies=True)\nassemblies.remove('persp')\n````\n### 导出准备\n\n贴图路径替换\n\nicon图片拍屏\n\nmaya文件另存为\n\n"},{"title":"ue python代码段记录","url":"/2023/02/23/ue-python代码段记录/","content":"### 添加内容浏览器右键\n````\nimport unreal\n\nmenus = unreal.ToolMenus.get()\n\n# add contextbrowser menu\nmenu_name = \"ContentBrowser.AssetContextMenu\"\nmenu = menus.find_menu(menu_name)\nentry = unreal.ToolMenuEntry(type=unreal.MultiBlockType.MENU_ENTRY)\nentry.set_label(\"Convert Materials\")\n# NOTE 注册执行的命令\ntyp = unreal.ToolMenuStringCommandType.PYTHON\nrun_str = \"print(11)\"\nentry.set_string_command(typ, \"\", run_str)\n\nmenu.add_section('CustomControl', label='CustomMenu')\nmenu.add_menu_entry('CustomControl',entry)\n````\n<!--more-->\n### 添加视口右键\n````\nviewport_menu_name = \"LevelEditor.ActorContextMenu\"\nmenu = menus.find_menu(viewport_menu_name)\nentry = unreal.ToolMenuEntry(type=unreal.MultiBlockType.MENU_ENTRY)\nentry.set_label(\"Convert Materials\")\ntyp = unreal.ToolMenuStringCommandType.PYTHON\nrun_str = \"\"\nentry.set_string_command(typ, \"\", run_str)\n\nmenu.add_section('CustomControl', label='ComstomMenu')\nmenu.add_menu_entry('CustomControl',entry)\n````\n\n### 添加菜单栏\n````\ntype_map = {'COMMAND': unreal.ToolMenuStringCommandType.COMMAND,\n   'PYTHON': unreal.ToolMenuStringCommandType.PYTHON}\n# 分割线字典用来分割项目\nmenu_section_dict = {\n        \"Assets\":\"AssetsManager\",\n        \"Animation\": \"Animation\",\n        \"Render\":\"Render\",\n        \"Help\":\"Help\"\n    }\n#项目配置\nmenu_entry_dict = {\n        \"Assets_Tool\" : {\n            \"section\": \"Assets\",\n            \"label\": \"AssetsManager 2.0\",\n            \"type\": \"PYTHON\",\n            \"command\": \"from imp import reload;import UE4Tools;reload(UE4Tools);UE4Tools.showWindow()\"\n        }\n    }\n#添加菜单栏目选项\nmenus = unreal.ToolMenus.get()\nmain_menu = menus.find_menu('LevelEditor.MainMenu')\nif not main_menu:\n    raise RuntimeError(\"Failed to find the 'Main' menu. Something is wrong in the force!\")\nscript_menu = main_menu.add_sub_menu(main_menu.get_name(), 'Tools', 'OneMT_Tools', 'OneMT')\n# 添加子项\nfor section, label in menu_section_dict.items():\n    script_menu.add_section(section, label)\n\nfor menu, data in menu_entry_dict.items():\n    entry = unreal.ToolMenuEntry(name=menu, type=unreal.MultiBlockType.MENU_ENTRY, insert_position=unreal.ToolMenuInsert('', unreal.ToolMenuInsertType.FIRST))\n    entry.set_label(data.get('label', 'untitle'))\n    command = data.get('command', '')\n    entry.set_string_command(type_map[data.get('type', 0)], '', string=command)\n    script_menu.add_menu_entry(data.get('section', ''), entry)\nmenus.refresh_all_widgets()\n````"},{"title":"ue官方推荐前缀","url":"/2023/02/15/ue官方推荐前缀/","content":"#### 常用前缀\n材质\n前缀 M_ 表示父材质，比如 M_Chair。\n前缀 MI_ 表示材质实例\n蓝图 BP_\n骨骼网格体 SK_\n静态网格体 SM_\n关卡序列 LS_\n\n\n| 资产类型 | 前缀  | 资产类型 | 前缀  |资产类型 |前缀  |资产类型 |前缀 |\n|------|-----|-----|-----|-----|-----|-----|----|\n| HDRI  | HDR_ |绑定|Rig_|关卡序列|LS_|媒体配置文件|MPR_|\n| 材质  | M_ |骨架|SKEL_|Sequencer编辑|EDIT_|-----|-----|\n| 材质实例  | MI_ |蒙太奇|AM_|-----|-----|-----|-----|\n| 物理资产  | PHYS_ |动画序列|AS_|-----|-----|-----|-----|\n| 物理材质  | PM_ |混合空间|BS_|-----|-----|-----|-----|\n| 后期处理材质  | PPM_ |-----|-----|-----|-----|-----|-----|\n| 骨骼网格体  | SK_ |-----|-----|-----|-----|-----|-----|\n| 静态网格体  | SM_ |-----|-----|-----|-----|-----|-----|\n| 纹理  | T_ |-----|-----|-----|-----|-----|-----|\n| OCIO配置文件  | OCIO_ |-----|-----|-----|-----|-----|-----|\n\n<!--more-->\n\n| 资产类型 | 前缀  | 资产类型 | 前缀  |资产类型 |前缀  |资产类型 |前缀 |\n|------|-----|-----|-----|-----|-----|-----|----|\n| Actor组件  | AC_ |粒子系统（级联）|PS_|-----|-----|-----|-----|\n| 动画蓝图  | ABP_ |Niagara发射器|FXE_|-----|-----|-----|-----|\n| 蓝图接口  | BI_ |Niagara系统|FXS_|-----|-----|-----|-----|\n| 蓝图  | BP_ |Niagara函数|FXF_|-----|-----|-----|-----|\n| 曲线表  | CT_ |混合空间|BS_|-----|-----|-----|-----|\n| 数据表  | DT_ |-----|-----|-----|-----|-----|-----|\n| 枚举  | E_ |-----|-----|-----|-----|-----|-----|\n| 结构  | F_ |-----|-----|-----|-----|-----|-----|\n| 控件蓝图  | WBP_ |-----|-----|-----|-----|-----|-----|\n\n\n"},{"title":"python-代码段记录2","url":"/2023/02/06/python-代码段记录2/","content":"\n#### Python 2.7中文处理\n\npython3对中文应该是友好一些,只不过目前工作用到的是2.7\n\n目前理解:\n\nstr在python中内部是unicode编码,在做编码转换时,通常要以unicode作为中间码,  \n要先知道原str的编码,然后使用**decode**解码成unicode,再转换**encode**成其他编码(如常用的utf-8)\n\n\n### 显示中文\n\nPython2.7默认使用的字符集是ASCII,只是让你的程序在运行的过程中显示中文.\n\n````\n# -*- coding: UTF-8 -*-\n````\n### 过滤中文字符\n````\n    regex = re.compile(u'[\\u4e00-\\u9fa5]+')\n    if regex.search(i) is None:\n    \n````\n\n### 设置系统默认字符编码\n````\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n````\n\n### 编码和解码\n\n````\n# 编\ndef encode_utf8(string):\n    return string.encode('utf-8')\n# 解\ndef decode_utf8(string)\n    return unicode(string, encoding='utf-8')\n````\n### 类似\\xe6\\x8f...转中文\n````\nprint(str.strip().decode('utf-8'))\n#或者\nb\"str\".decode('utf-8')\n````\n"},{"title":"百度网盘高速下载","url":"/2023/02/06/百度网盘高速下载/","content":"\n\n1.先安装油猴插件Tampermonkey\n\n\n2.下载[百度网盘简易下载助手（直链下载复活版）](https://greasyfork.org/zh-CN)\n\n\n3.安装后去下载[aria2](http://aria2.baisheng999.com/),双击运行ariaNG启动器\n\n\n4.要把下载的文件保存到自己的网盘,然后关注微信公众号,获取验证码,即可下载."},{"title":"pyqt/pyside代码段记录","url":"/2023/02/02/pyqt-pyside代码段记录/","content":"#### 获取自带icon图\n````\nstyle = QtWidgets.QApplication.style()\nicon = style.standardIcon(QtWidgets.QStyle.SP_DirIcon)\nfor i in idea_list:\n\n    item = QtWidgets.QListWidgetItem()\n    item.setText(i.split(\"_\")[1])\n    item.setIcon(icon)\n````\n![1.png](..%2Fimages%2Fqt%2F1.png)\n<!--more-->"},{"title":"阅读studio_library代码笔记","url":"/2023/01/29/studio-library/","content":"\n### 动态加载包\n字符串形式动态导入包\n![3.png](..%2Fimages%2FLIBRARY%2F3.png)\n````\n__import__(字符串)\n````\n<!--more-->\n### getattr获取对象中的属性\n\n这个found可以是模块,如果在模块中找不到n会引发异常\ngetattr(x, ‘foobar’) 等同于 x.foobar.如果指定的属性不存在,且提供了 default 值,则返回它.否则触发AttributeError.\n````\nfound = getattr(found, n) \n````\n\n### 创建有序字典\n目前理解两个字典顺序不一致,==则为false\n````\n_itemClasses = collections.OrderedDict()\n````\n### 监听关闭maya事件,触发事件(比如保存程序设置)\n\n<details>\n  <summary>点我展开看代码</summary>\n  <pre><code>\n_mayaCloseScriptJob = None\ndef enableMayaClosedEvent():\n\"\"\"\nCreate a Maya script job to trigger on the event \"quitApplication\".\nEnable the Maya closed event to save the library settings on close\n:rtype: None\n\"\"\"\nglobal _mayaCloseScriptJob\nif not _mayaCloseScriptJob:\n    event = ['quitApplication', mayaClosedEvent]\n    try:\n        _mayaCloseScriptJob = mutils.ScriptJob(event=event)\n        logger.debug(\"Maya close event enabled\")\n    except NameError as error:\n        logging.exception(error)\ndef disableMayaClosedEvent():\n\"\"\"Disable the maya closed event.\"\"\"\nglobal _mayaCloseScriptJob\nif _mayaCloseScriptJob:\n    _mayaCloseScriptJob.kill()\n    _mayaCloseScriptJob = None\n    logger.debug(\"Maya close event disabled\")\ndef mayaClosedEvent():\n\"\"\"\nCreate a Maya script job to trigger on the event \"quitApplication\".\n:rtype: None\n\"\"\"\nfor libraryWindow in librarywindow.LibraryWindow.instances():\n    libraryWindow.saveSettings()\n  </code></pre>\n</details>\n\n\n\n"},{"title":"windows疑难杂症","url":"/2023/01/29/windows疑难杂症/","content":"### 远程桌面----“你的凭据不工作\"\n\n[csdn链接](https://blog.csdn.net/qq_29918079/article/details/80011234)\n之前遇到过此问题,忘记是哪个解决方案了,下回出现再更新记录~\n\n<!--more-->\n"},{"title":"cmd代码记录","url":"/2023/01/29/cmd代码记录/","content":"\n### 用到的一些cmd命令\n````\n%WINDIR%                 {系统目录 - C:\\WINDOWS}\n%SYSTEMROOT%             {系统目录 - C:\\WINDOWS}\n%SYSTEMDRIVE%            {系统根目录 - C:}\n%HOMEDRIVE%              {当前用户根目录 - C:}\n%USERPROFILE%            {当前用户目录 - C:\\Documents and Settings\\wy}\n%HOMEPATH%               {当前用户路径 - \\Documents and Settings\\wy}\n%TMP%                    {当前用户临时文件夹 - C:\\DOCUME~1\\wy\\LOCALS~1\\Temp}\n%TEMP%                   {当前用户临时文件夹 - C:\\DOCUME~1\\wy\\LOCALS~1\\Temp}\n%APPDATA%                {当前用户数据文件夹 - C:\\Documents and Settings\\wy\\Application Data}\n%PROGRAMFILES%           {程序默认安装目录 - C:\\Program Files}\n%COMMONPROGRAMFILES%     {文件通用目录 - C:\\Program Files\\Common Files}\n%USERNAME%               {当前用户名 - wy}\n%ALLUSERSPROFILE%        {所有用户文件目录 - C:\\Documents and Settings\\All Users}\n%OS%                     {操作系统名 - Windows_NT}\n%COMPUTERNAME%           {计算机名 - IBM-B63851E95C9}\n%NUMBER_OF_PROCESSORS%   {处理器个数 - 1}\n%PROCESSOR_ARCHITECTURE% {处理器芯片架构 - x86}\n%PROCESSOR_LEVEL%        {处理器型号 - 6}\n%PROCESSOR_REVISION%     {处理器修订号 - 0905}\n%USERDOMAIN%             {包含用户帐号的域 - IBM-B63851E95C9}\n%COMSPEC%                {C:\\WINDOWS\\system32\\cmd.exe}\n\n%PATHEXT% {执行文件类型 - .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.pyo;.pyc;.py;.pyw}\n%PATH%    {搜索路径}\n````\n<!--more-->\n### cmd 命令中带有空格\n解决方法  \n加双引号或使用别名 例:   \nc:\\Program Files 可以转换为\n````\nc:\\Progra~1\n````"},{"title":"python代码段记录","url":"/2023/01/29/python-代码段记录/","content":"[//]: # (password: hello)\n\n[//]: # (abstract：用于设置加密文章显示的摘要。)\n\n[//]: # (message：输入密码提示。)\n\n[//]: # (wrong_pass_message: 输入错误提示。)\n\n\n#### 杂项\n### UUID生成\n````\nimport uuid \nprint(uuid.uuid4().hex[:10])\n````\n### windows用户名\n````\nimport getpass\ngetpass.getuser()\n````\n<!--more-->\n### py打包exe\n-F: 产生单个可执行文件  \n-w: 不显示控制台  \n-i: 添加图标\n````\npyinstaller -F -w -i 'xxx.ico' xxx.py\n````\n\n#### os\n[官方网址](https://docs.python.org/zh-cn/3.7/library/os.html)  \n常用命令  \n<font color=#008000>os.name</font>:指示你正在使用的工作平台。比如对于Windows，它是'nt'，而对于Linux/Unix用户，它是'posix'.  \n<font color=#008000>os.getcwd</font>:得到当前工作目录，即当前python脚本工作的目录路径。  \n<font color=#008000>os.listdir</font>:返回指定目录下的所有文件和目录名  \n<font color=#008000>os.remove(file)</font>:删除一个文件  \n<font color=#008000>os.stat(file)</font>:获得文件属性\n<font color=#008000>os.path.split()</font>:分割路径和文件名\n<font color=#008000>os.path.splitext()</font>:分割文件名和扩展名\n<font color=#008000>os.mkdir(name)</font>:创建目录  \n<font color=#008000>os.rmdir</font>:删除目录  \n<font color=#008000>os.system</font>:运行shell命令\n<font color=#008000>os.path.isfile()和os.path.isdir()</font>:分别检验给出的路径是一个目录还是文件\n<font color=#008000>os.path.existe()</font>:检验给出的路径是否真的存在\n<font color=#008000>os.listdir(dirname)</font>:列出dirname下的目录和文件  \n<font color=#008000>os.path.isdir(name)</font>:判断name是不是目录，不是目录就返回false  \n<font color=#008000>os.path.isfile(name</font>:判断name这个文件是否存在，不存在返回false  \n<font color=#008000>os.path.splitext()</font>:分离文件名和扩展名  \n<font color=#008000>os.path.join(path,name)</font>:连接目录与文件名或目录  \n<font color=#008000>os.path.basename(path)</font>:返回文件名  \n<font color=#008000>os.path.dirname(path)</font>:返回文件路径  \n#### Shutil \n对os的补充  \n<font color=#008000>shutil.copy2(文件路径, 新路径)</font>:拷贝文件和状态信息  \n<font color=#008000>shutil.copytree(源文件夹, 复制至dst文件夹，该文件夹会自动创建，需保证此文件夹不存在，否则将报错, symlinks=False, ignore=None)</font>:递归的去拷贝文件夹  \n<font color=#008000>shutil.rmtree(path[, ignore_errors[, onerror]])</font>:递归的去删除文件  \n<font color=#008000>shutil.make_archive(base_name, format[, root_dir[, base_dir, verbose, dry_run, owner, group, logger])</font>:创建压缩包并返回文件路径，例如：zip、tar  \n#### sys\n常用命令  \n<font color=#008000>sys.path</font>:当前环境变量  \n<font color=#008000>sys.path.append('路径')</font>:添加环境变量  \n\n#### 路径字符串拆分切片后并合并\n````\n\"/\".join(字符串.split('/')[5:]\n````\n"},{"title":"maya 开发常用功能记录","url":"/2023/01/29/maya-开发功能记录/","content":"\n#### 代码段记录\n\n### 跟踪报错位置\n\n转载于[vanny yuan's](https://vannyyuan.github.io/2020/10/13/maya/Maya%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/)\n\n````\ntry:\n    import 模块\n    reload(模块)\n    模块.func()\nexcept:\n    import traceback\n    traceback.print_exc()\n````\n<!--more-->\n### Maya的runTimeCommand所在路径\n转载于[vanny yuan's](https://vannyyuan.github.io/2020/10/13/maya/Maya%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/)\n\n````\n// 直接运行\n attachCache\n\n // 查询attachCache类型\n whatIs attachCache\n // Result: Run Time Command // \n\n // 查询runTimeCommand调用的方法\n runTimeCommand -q -command attachCache\n // Result: doAttachCacheArgList(0,{}) // \n\n // 查询doAttachCacheArgList\n whatIs doAttachCacheArgList\n // Result: Mel procedure found in: C:/Program Files/Autodesk/Maya2018/scripts/others/doAttachCacheArgList.mel //\n````\n### maya的环境变量\n\n[官方网站](https://github.com/mottosso/Maya-Environment-Variables)  \n中文翻译 转载[凌云](https://lingyunfx.com/maya-py-to-pyd/)\n![](images/maya环境变量.png)  \n\n常用\n````\nMAYA_DISABLE_CLIC_IPM=1  \n关闭登录功能  \nMAYA_UI_LANGUAGE zh_CN或en_US  \n切换语言  \n````\n### 切换到总渲染层\npython\n````\ncmds.editRenderLayerGlobals( currentRenderLayer='defaultRenderLayer' )\ncmds.setAttr('defaultRenderLayer.renderable',0)\n````\n### 进入摄像机视角\npython\n````\ncmds.lookThru('camera1')\n````\n### 获取渲染层id\nmel\n````\nlistConnections renderLayerManager.renderLayerId\n````\n### 当前渲染器\nmel\n````\ncurrentRenderer()\n````\n### ui面板id\npython\n````\npanes=cmds.getPanel( type='modelPanel')\n````\n### 关闭缩略图\npython\n````\ncmds.renderThumbnailUpdate(False)\n````\n### 鼠标状态\npython\n````\ncmds.waitCursor( state=True )\ncmds.waitCursor( state=False )\n````\n### 返回当前活动窗口\n````\ncmds.getPanel(withFocus=True)\n````\n### 判断两个模型是否可以做blendshape\n````\nsel = cmds.ls(sl=1)  \nprint(sel)\nret = cmds.polyCompare(sel,v=1,e=1,fd=1)  \n````\n### 拍屏代码参考\n````\ncmds.playblast(forceOverwrite=True, clearCache=True, startTime=1, endTime=10, sequenceTime=0, percent=100,\nquality=100, framePadding=4, widthHeight=[960, 540], format='qt', compression=\"MPEG-4 Video\",\nshowOrnaments=True, viewer=False, offScreen=True, filename='D:/cs.mov')\n````\n### 撤销多步\n一个功能包含多个command命令,想要一次撤回所有command,需要包裹代码块\n````\ncmds.undoInfo(openChunk=True)\n代码\ncmds.undoInfo(closeChunk=True)\n````\n### dock 停靠窗口\n[上连接](https://blog.csdn.net/VONGOLA10BOSS/article/details/120057784)\n````\nfrom maya.app.general.mayaMixin import MayaQWidgetDockableMixin\nfrom PySide2 import QtWidgets\nclass MyDockableWindow(MayaQWidgetDockableMixin, QtWidgets.QWidget):\n    def __init__(self):\n        super(MyDockableWindow, self).__init__()\n\n        # Delete existing UI\n        try:\n            cmds.deleteUI('MDWWorkspaceControl')\n        except RuntimeError:\n            pass\n\n        self.setWindowTitle('My Dockable Window')\n        self.resize(500, 400)\n        self.setObjectName('MDW')\n        self.show(dockable=True)\n\nMyWin = MyDockableWindow()\n````\n### mesh坐标轴跟组保持一致?\n\n````\na = cmds.makeIdentity('pCube1', a=1, t=1, r=1, s=1, n=0, pn=1)\na = cmds.makeIdentity('pCube1', a=0, t=1, r=1, s=1)\n\n````\n\n### 判断mesh是否重命名\n\n````\ntry:\n    mesh = cmds.listRelatives(mesh的shape节点, parent=True)[0]\nexpcept:\n    print \"有重命名mesh\"\n````"},{"title":"maya等软件问题合集","url":"/2023/01/29/maya等软件问题合集/","content":"#### maya\n\n### callback 问题\n\n最近\"有幸\"遇到了这个问题, \n\n\n\n解决方法  \npython\n````\nfor modelPanel in cmds.getPanel(type=\"modelPanel\"):\n    if cmds.modelEditor(modelPanel, q=1, ec=1) == \"CgAbBlastPanelOptChangeCallback\":\n        cmds.modelEditor(modelPanel, e=1, ec=\"\")\n````\n转载于[智商帝](https://blog.l0v0.com/posts/a7c99667.html)\n<!--more-->\n### 渲染设置面板丢失\n\n解决方法  \nmel\n````\ndeleteUI unifiedRenderGlobalsWindow;\nbuildNewSceneUI;\n````\n### 删除未知节点\n\n解决方法  \npython\n````\nunknown_nodes = cmds.ls(type=['unknown', 'unknownDag', 'unknownTransform'])\nif len(unknown_nodes) > 0:\n    cmds.delete(unknown_nodes)\n    print '%s remove success.' % unknown_nodes\nelse:\n    print 'There are no Unknown Node.'\n````\n````\nunknown_plugin = cmds.unknownPlugin(q=True, list=True)\nif unknown_plugin is not None:\n    for i in unknown_plugin:\n        cmds.unknownPlugin(i, remove=True)\n        print 'Unkown Plugin %s remove sucess.' % i\nelse:\n    print 'There are no Unkown Plugin.'\n````\n\n"},{"title":"2022年工作总结和未来规划(美术)","url":"/2023/01/28/2022年工作总结和未来规划2/","content":"主要整理今年自己工作上的作品(灯光渲染合成)\n\n___多图预警___\n\n![11](/images/zuopin12.png)\n<!--more-->\n![22](/images/zuopin2.png)\n\n![22](/images/zuopin3.png)\n\n![22](/images/zuopin4.png)\n\n![22](/images/zuopin5.png)\n\n![22](/images/zuopin6.png)\n\n![22](/images/zuopin7.png)\n\n![22](/images/zuopin8.png)\n\n"},{"title":"2022年工作总结和未来规划(程序)","url":"/2023/01/28/2022年工作总结和未来规划1/","content":"主要整理下这一年所做的部分插件,因为有些功能做的很急...考虑的点不是很全面,所以今年(2023)要进行一些优化.\n<!--more-->\n[//]: # (Quick Start)\n\n### 渲染工具\n\n![](/images/渲染工具.png)\n\n\n使用最频繁之一的插件了,创建aov那里的代码逻辑需要改进,而且要添加自定义config.\n\n\n\n### deadline 提交插件\n\n#### 提交插件 主动\n\n![](/images/deadline提交工具.png)\n\n优势和解决的痛点\n1.优先帧测试功能,可自动提交自定义测试帧,不必手动设置\n\n2.提交速度,相比官方插件优化了一些不必要的参数,提交速度提升约70%\n\n3.黑白名单功能(后续可能会移除此功能),最开始的设计这个功能的初衷是有些机子渲染会失败,提交时把已知报错的机子添加黑名单即可解决.后面写了个事件插件,因此觉得此功能可以废除\n\n4.自动指认cgteam上渲染输出路径,可规范化路径,一键式提交\n\n_计划上线的功能_\n\n后续会增加自动计算首尾帧,和首中尾帧功能\n\n#### 提交插件 被动\n\n解决的痛点\n1.一台机子渲染任务时如果报错,也会一直渲染直到整个任务失败,导致要不断人工检查是否报错.包括周六周日.\n现在设定每个任务如果渲染失败超过3次会自动加入黑名单,基本解决以上问题\n\n2.每个优先级为100的任务,渲染完成后会自动调整为0\n方便制作人员查看,渲染的优先级\n\n\n_计划上线的功能_\n\n目前会出现一台机子几秒渲染一帧的失败情况,后续也会考虑添加最低渲染时间,如果低于这个时间会自动加入黑名单,这个在安排中\n\n### pipeline 工具\n\n![](/images/pipeline.png)\n\n解决的痛点\n\n1.规范文件,快速定位打开maya档案\n\n2.提升打开文件速度,自动关闭显示贴图等\n\n3.快速导入结算文件\n\n4.可直接双击查看动画和结算拍屏\n\n_计划上线的功能_\n\n1.添加自定义文件路径,创建属于自己的一个maya库,快速导入\n\n2.Ui现在的设计不是很合理,并且有些丑…\n\n### 快速添加至渲染层\n\n![](/images/大纲右键.png)\n\n解决的痛点\n\n1.Maya自带的添加渲染层很卡,不方便\n\n2.修改原生ui,可直接outline右键添加物体到渲染层,使用更平滑\n\n### 未来规划\n\nue python 蓝图 \n\n\n\n\n\n"}]